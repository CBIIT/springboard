<?php

define('WEBPURIFY_WATCHDOG_TYPE',               'WebPurify');
define('WEBPURIFY_REST_URL',                    'http://api1.webpurify.com/services/rest/');
define('WEBPURIFY_REST_URL_METHOD',             'POST');

define('WEBPURIFY_MODE_OFF',                    'off');
define('WEBPURIFY_MODE_BLOCK',                  'block');
define('WEBPURIFY_MODE_REWRITE',                'rewrite');

define('WEBPURIFY_FAIL_MODE_NOTHING',           'nothing');
define('WEBPURIFY_FAIL_MODE_BLOCK',             'block');

define('WEBPURIFY_NODE_TITLE_FAIL_MESSAGE',     'Node Failure');
define('WEBPURIFY_NODE_CREATE_FAIL_MESSAGE',    'Node creation is temporarily disabled');
define('WEBPURIFY_NODE_VIEW_FAIL_MESSAGE',      'Node viewing is temporarily disabled');

define('WEBPURIFY_COMMENT_SUBJECT_FAIL_MESSAGE','Comment Failure');
define('WEBPURIFY_COMMENT_CREATE_FAIL_MESSAGE', 'Comment creation is temporarily disabled');
define('WEBPURIFY_COMMENT_VIEW_FAIL_MESSAGE',   'Comment viewing is temporarily disabled');

define('WEBPURIFY_TERM_TITLE_FAIL_MESSAGE',  'Term Failure');
define('WEBPURIFY_TERM_CREATE_FAIL_MESSAGE', 'Term creation is temporarily disabled');
define('WEBPURIFY_TERM_VIEW_FAIL_MESSAGE',   'Term viewing is temporarily disabled');

define('WEBPURIFY_USER_USERNAME_FAIL_MESSAGE',  'User Failure');
define('WEBPURIFY_USER_CREATE_FAIL_MESSAGE',    'User creation is temporarily disabled');
define('WEBPURIFY_USER_VIEW_FAIL_MESSAGE',      'User viewing is temporarily disabled');

define('WEBPURIFY_DEFAULT_FILTER_SYMBOL',       '*');

/**
 * Implementation of hook_help()
 */
function webpurify_help($path, $arg=array()) {
  switch ($path) {
    case 'admin/modules#description':
      return t("The WebPurify module provides an API to the WebPurify API, comment/node profanity checking, and an input filter.");
    case 'admin/help#webpurify':
      return t('<p>The WebPurify module allows you to filter words or phrases in site content and replace the filtered words with the specified replacement symbol.</p>');
    case 'admin/settings/webpurify':
      return t('In order for filtering to work on the body text of a node or comment, you must activate the WebPurify filter in your input filters. Check your filter settings at !filter.', array('!filter' => l('Input Formats', 'admin/settings/filters')));
  }
}

/**
 * Implementation of hook_menu()
 */
function webpurify_menu() { 
  $items = array();

  $items['admin/config/services/webpurify'] = array(
    'title' => t('WebPurify Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webpurify_settings_form'),
    'description' => t('Configure WebPurify.'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/webpurify/test'] = array(
    'title' => t('WebPurify Test'),
    'page callback' => 'webpurify_test',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Administration Page Form
 */
function webpurify_settings_form() {
  $form = array();
  
  if (
    (variable_get('webpurify_node_body_mode', WEBPURIFY_MODE_OFF) == WEBPURIFY_MODE_REWRITE) ||
    (variable_get('webpurify_comment_body_mode', WEBPURIFY_MODE_OFF) == WEBPURIFY_MODE_REWRITE)
  ) {
    drupal_set_message(t('WARNING: You have configured rewrite mode on at least one context type. You MUST make sure to enable the WebPurify input filter for content to be filtered using WebPurify.'), 'warning', FALSE);
  };
  
  $form['keys'] = array(
    '#type' => 'fieldset',
    '#title' => t('API Keys'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['keys']['webpurify_developerkey'] = array(
    '#type'  => 'textfield',
    '#title' => t('Developer Key'),
    '#size'  => 120,
    '#maxlength'     => 300,
    '#default_value' => variable_get('webpurify_developerkey', ''),
    '#description'   => t('Enter the developer key provided to you by !link', array('!link' => 'http://www.webpurify.com')),
  );

  $form['filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Replacement Filter'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['filter']['webpurify_filter_symbol'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Default replacement symbol'),
    '#description'    => t('The replacement symbol will replace each character in a profane word.'),
    '#size'           => 1,
    '#maxlength'      => 1,
    '#required'       => TRUE,
    '#default_value'  => variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL),
  );
  
  $form['nodes'] = array(
    '#type' => 'fieldset',
    '#title' => t('Nodes'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['nodes']['title'] = array(
    '#type' => 'fieldset',
    '#title' => t('Title'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['nodes']['title']['webpurify_node_title_mode'] = array(
    '#type'  => 'select',
    '#title' => t('Title Mode'),
    '#options'  => _webpurify_get_modes(FALSE),
    '#default_value' => variable_get('webpurify_node_title_mode', WEBPURIFY_MODE_OFF),
    '#description' => t('Select how you want WebPurify to handle node titles. NOTE: If you enable rewriting of node titles, they will be replaced with the filtered text. They are not filtered on the fly as with the input filters.'),
  );
  $form['nodes']['title']['webpurify_node_title_fail_mode'] = array(
    '#type'  => 'select',
    '#title' => t('Title Failure Mode'),
    '#options'  => _webpurify_get_fail_modes(),
    '#default_value' => variable_get('webpurify_node_title_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK),
    '#description'   => t('Select how you want WebPurify to handle node creation when the API fails to respond'),
  );
  $form['nodes']['title']['webpurify_node_title_fail_message'] = array(
    '#type'  => 'textfield',
    '#title' => t('Title Failure Message'),
    '#default_value' => variable_get('webpurify_node_title_fail_message', t(WEBPURIFY_NODE_CREATE_FAIL_MESSAGE)),
    '#description'   => t('This is the text that will be saved if node creation will be blocked during an API failure'),
  );
  $form['nodes']['body'] = array(
    '#type' => 'fieldset',
    '#title' => t('Body'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['nodes']['body']['webpurify_node_body_mode'] = array(
    '#type'  => 'select',
    '#title' => t('Body Mode'),
    '#options'  => _webpurify_get_modes(),
    '#default_value' => variable_get('webpurify_node_body_mode', WEBPURIFY_MODE_OFF),
    '#description'   => t('Select how you want WebPurify to handle node bodies. When set to rewrite mode, nothing actually happens. Rewrites happen via the WebPurify input filter. However, this mode does allow you to try and block node creation during WebPurify failure.'),
  );
  $form['nodes']['body']['webpurify_node_create_fail_mode'] = array(
    '#type'  => 'select',
    '#title' => t('Create Failure Mode'),
    '#options'  => _webpurify_get_fail_modes(),
    '#default_value' => variable_get('webpurify_node_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK),
    '#description'   => t('Select how you want WebPurify to handle node creation when the API fails to respond'),
  );
  $form['nodes']['body']['webpurify_node_create_fail_message'] = array(
    '#type'  => 'textfield',
    '#title' => t('Create Failure Message'),
    '#default_value' => variable_get('webpurify_node_create_fail_message', t(WEBPURIFY_NODE_CREATE_FAIL_MESSAGE)),
    '#description'   => t('This is the text that will be displayed if node creation will be blocked during an API failure'),
  );
  $form['nodes']['body']['webpurify_node_view_fail_mode'] = array(
    '#type'  => 'select',
    '#title' => t('View Failure Mode'),
    '#options'  => _webpurify_get_fail_modes(),
    '#default_value' => variable_get('webpurify_node_view_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK),
    '#description'   => t('Select how you want WebPurify to handle node viewing when the API fails to respond'),
  );
  $form['nodes']['body']['webpurify_node_view_fail_message'] = array(
    '#type'  => 'textfield',
    '#title' => t('View Failure Message'),
    '#default_value' => variable_get('webpurify_node_view_fail_message', t(WEBPURIFY_NODE_VIEW_FAIL_MESSAGE)),
    '#description'   => t('This is the text that will be displayed if node viewing will be blocked during an API failure'),
  );
  
  if (module_exists('comment')) {
    $form['comments'] = array(
      '#type' => 'fieldset',
      '#title' => t('Comments'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['comments']['subject'] = array(
      '#type' => 'fieldset',
      '#title' => t('Subject'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['comments']['subject']['webpurify_comment_subject_mode'] = array(
      '#type'  => 'select',
      '#title' => t('Title Mode'),
      '#options'  => _webpurify_get_modes(FALSE),
      '#default_value' => variable_get('webpurify_comment_subject_mode', WEBPURIFY_MODE_OFF),
      '#description' => t('Select how you want WebPurify to handle comment subjects. NOTE: If you enable rewriting of comment subjects, they will be replaced with the filtered text. They are not filtered on the fly as with the input filters.'),
    );
    $form['comments']['body']['webpurify_comment_subject_fail_mode'] = array(
      '#type'  => 'select',
      '#title' => t('Create Failure Mode'),
      '#options'  => _webpurify_get_fail_modes(),
      '#default_value' => variable_get('webpurify_comment_subject_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK),
      '#description'   => t('Select how you want WebPurify to handle comments when the API fails to respond'),
    );
    $form['comments']['subject']['webpurify_comment_subject_fail_message'] = array(
      '#type'  => 'textfield',
      '#title' => t('Create Failure Message'),
      '#default_value' => variable_get('webpurify_comment_subject_fail_message', t(WEBPURIFY_COMMENT_CREATE_FAIL_MESSAGE)),
      '#description'   => t('This is the text that will be displayed if node creation will be blocked during an API failure'),
    );
    $form['comments']['body'] = array(
      '#type' => 'fieldset',
      '#title' => t('Body'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['comments']['body']['webpurify_comment_body_mode'] = array(
      '#type'  => 'select',
      '#title' => t('Body Mode'),
      '#options'  => _webpurify_get_modes(),
      '#default_value' => variable_get('webpurify_comment_body_mode', WEBPURIFY_MODE_OFF),
      '#description'   => t('Select how you want WebPurify to handle comments. When set to rewrite mode, nothing actually happens. Rewrites happen via the WebPurify input filter. However, this mode does allow you to try and block comment creation during WebPurify failure.'),
    );
    $form['comments']['body']['webpurify_comment_create_fail_mode'] = array(
      '#type'  => 'select',
      '#title' => t('Create Failure Mode'),
      '#options'  => _webpurify_get_fail_modes(),
      '#default_value' => variable_get('webpurify_comment_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK),
      '#description'   => t('Select how you want WebPurify to handle comments when the API fails to respond'),
    );
    $form['comments']['body']['webpurify_comment_create_fail_message'] = array(
      '#type'  => 'textfield',
      '#title' => t('Create Failure Message'),
      '#default_value' => variable_get('webpurify_comment_create_fail_message', t(WEBPURIFY_COMMENT_CREATE_FAIL_MESSAGE)),
      '#description'   => t('This is the text that will be displayed if comments will be blocked during an API failure'),
    );
    /* No way to do this at the moment
    $form['comments']['body']['webpurify_comment_view_fail_mode'] = array(
      '#type'  => 'select',
      '#title' => t('View Failure Mode'),
      '#options'  => _webpurify_get_fail_modes(),
      '#default_value' => variable_get('webpurify_comment_view_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK),
      '#description'   => t('Select how you want WebPurify to handle comments when the API fails to respond'),
    );
    $form['comments']['body']['webpurify_comment_view_fail_message'] = array(
      '#type'  => 'textfield',
      '#title' => t('View Failure Message'),
      '#default_value' => variable_get('webpurify_comment_view_fail_message', t(WEBPURIFY_COMMENT_VIEW_FAIL_MESSAGE)),
      '#description'   => t('This is the text that will be displayed if comments will be blocked during an API failure'),
    );
    */
  }
  
  $form['users'] = array(
    '#type' => 'fieldset',
    '#title' => t('Users'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['users']['username'] = array(
    '#type' => 'fieldset',
    '#title' => t('Username'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['users']['username']['webpurify_user_username_mode'] = array(
    '#type'  => 'select',
    '#title' => t('Username Mode'),
    '#options'  => _webpurify_get_user_modes(),
    '#default_value' => variable_get('webpurify_user_username_mode', WEBPURIFY_MODE_OFF),
    '#description' => t('Select how you want WebPurify to handle usernames.'),
  );
  $form['users']['username']['webpurify_user_username_fail_mode'] = array(
    '#type'  => 'select',
    '#title' => t('Username Failure Mode'),
    '#options'  => _webpurify_get_fail_modes(),
    '#default_value' => variable_get('webpurify_user_username_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK),
    '#description'   => t('Select how you want WebPurify to handle user creation when the API fails to respond'),
  );
  $form['users']['username']['webpurify_user_username_fail_message'] = array(
    '#type'  => 'textfield',
    '#title' => t('Username Failure Message'),
    '#default_value' => variable_get('webpurify_user_username_fail_message', t(WEBPURIFY_USER_CREATE_FAIL_MESSAGE)),
    '#description'   => t('This is the text that will be saved if user creation will be blocked during an API failure'),
  );
  
  if (module_exists('taxonomy')) {
    $form['taxonomy'] = array(
      '#type' => 'fieldset',
      '#title' => t('Terms'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['taxonomy']['term'] = array(
      '#type' => 'fieldset',
      '#title' => t('Name'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['taxonomy']['term']['webpurify_term_name_mode'] = array(
      '#type'  => 'select',
      '#title' => t('Name Mode'),
      '#options'  => _webpurify_get_term_modes(),
      '#default_value' => variable_get('webpurify_term_name_mode', WEBPURIFY_MODE_OFF),
      '#description' => t('Select how you want WebPurify to handle term name.'),
    );
    $form['taxonomy']['term']['webpurify_term_name_fail_mode'] = array(
      '#type'  => 'select',
      '#title' => t('Create Failure Mode'),
      '#options'  => _webpurify_get_fail_modes(),
      '#default_value' => variable_get('webpurify_term_name_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK),
      '#description'   => t('Select how you want WebPurify to handle term when the API fails to respond.'),
    );
    $form['taxonomy']['term']['webpurify_term_name_fail_message'] = array(
      '#type'  => 'textfield',
      '#title' => t('Create Failure Message'),
      '#default_value' => variable_get('webpurify_term_name_create_fail_message', t(WEBPURIFY_TERM_CREATE_FAIL_MESSAGE)),
      '#description'   => t('This is the text that will be displayed if term creation will be blocked during an API failure.'),
    );
    $form['taxonomy']['description'] = array(
      '#type' => 'fieldset',
      '#title' => t('Description'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['taxonomy']['description']['webpurify_term_description_mode'] = array(
      '#type'  => 'select',
      '#title' => t('Description Mode'),
      '#options'  => _webpurify_get_term_modes(),
      '#default_value' => variable_get('webpurify_term_description_mode', WEBPURIFY_MODE_OFF),
      '#description'   => t('Select how you want WebPurify to handle terms. When set to rewrite mode, nothing actually happens. Rewrites happen via the WebPurify input filter. However, this mode does allow you to try and block term creation during WebPurify failure.'),
    );
    $form['taxonomy']['description']['webpurify_term_description_create_fail_mode'] = array(
      '#type'  => 'select',
      '#title' => t('Description Failure Mode'),
      '#options'  => _webpurify_get_fail_modes(),
      '#default_value' => variable_get('webpurify_term_description_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK),
      '#description'   => t('Select how you want WebPurify to handle terms when the API fails to respond'),
    );
    $form['taxonomy']['description']['webpurify_term_description_create_fail_message'] = array(
      '#type'  => 'textfield',
      '#title' => t('Create Failure Message'),
      '#default_value' => variable_get('webpurify_term_description_create_fail_message', t(WEBPURIFY_TERM_CREATE_FAIL_MESSAGE)),
      '#description'   => t('This is the text that will be displayed if terms will be blocked during an API failure'),
    );
  }
  
  return system_settings_form($form);
}

function _webpurify_get_modes($via_input_filter = TRUE) {
  return array(
    WEBPURIFY_MODE_OFF      => t('Do nothing'),
    WEBPURIFY_MODE_BLOCK    => t('Block expletives'),
    WEBPURIFY_MODE_REWRITE  => $via_input_filter ? t('Rewrite expletives (via Input Filter)') : t('Rewrite expletives'),
  );
}

function _webpurify_get_term_modes() {
  return array(
    WEBPURIFY_MODE_OFF      => t('Do nothing'),
    WEBPURIFY_MODE_REWRITE  => t('Rewrite expletives'),
  );
}

function _webpurify_get_user_modes() {
  return array(
    WEBPURIFY_MODE_OFF      => t('Do nothing'),
    WEBPURIFY_MODE_BLOCK    => t('Block expletives'),
  );
}

function _webpurify_get_fail_modes() {
  return array(
    WEBPURIFY_FAIL_MODE_NOTHING => 'Allow during failure',
    WEBPURIFY_FAIL_MODE_BLOCK   => 'Block during failure',
  );
}

function webpurify_test() {
  $output = '';
  
  $output .= "check('fuck shit cock') = " . print_r(webpurify_api_check('fuck shit cock'), TRUE) . "<br>\n";
  $output .= "check('This is a test') = " . print_r(webpurify_api_check('This is a test'), TRUE) . "<br>\n";
  
  $output .= "checkcount('fuck shit cock') = " . print_r(webpurify_api_checkcount('fuck shit cock'), TRUE) . "<br>\n";
  $output .= "checkcount('This is a test') = " . print_r(webpurify_api_checkcount('This is a test'), TRUE) . "<br>\n";
  
  $output .= "replace('fuck shit cock') = " . print_r(webpurify_api_replace('fuck shit cock', WEBPURIFY_DEFAULT_FILTER_SYMBOL), TRUE) . "<br>\n";
  $output .= "replace('This is a test') = " . print_r(webpurify_api_replace('This is a test', WEBPURIFY_DEFAULT_FILTER_SYMBOL), TRUE) . "<br>\n";
  
  $output .= "return('fuck shit cock') = " . print_r(webpurify_api_return('fuck shit cock', WEBPURIFY_DEFAULT_FILTER_SYMBOL), TRUE) . "<br>\n";
  $output .= "return('This is a test') = " . print_r(webpurify_api_return('This is a test', WEBPURIFY_DEFAULT_FILTER_SYMBOL), TRUE) . "<br>\n";
  
  $output .= webpurify_get_error();
  
  return $output;
}

/**
 * Implementation of hook filter info
 *
 * @return array
 *   filter info
 */
function webpurify_filter_info( ) {
  $filters['webpurify'] = array(
    'title' => t('Webpurify'),
    'description' => t('Webpurify Service implementation'),
    'process callback' => 'webpurify_filter_process',
    'default settings' => array(),
  );

  return $filters;
}

/**
 * Webpurify filter process
 *
 * @param string $text
 *   string
 * @param string $filter
 *   filter
 *
 * @return string
 *   filtered string
 */
function webpurify_filter_process($text, $filter) {
  if (webpurify_get_node_body_mode() == WEBPURIFY_MODE_REWRITE) {
    // get replacement symbol
    $symbol = variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL);
    
    // try replacement
    $replaced_text = webpurify_api_replace($text, $symbol);
    if ($replaced_text === FALSE) {
      if (webpurify_get_node_view_fail_mode() == WEBPURIFY_FAIL_MODE_BLOCK) {
        return variable_get('webpurify_node_view_fail_message', t(WEBPURIFY_NODE_VIEW_FAIL_MESSAGE));
      }
      watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
    }
    elseif ($replaced_text != $text) {
      watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. "Input Filter Rewrite: [".$text."]>>>[".$replaced_text."]", array(), WATCHDOG_NOTICE);
      return $replaced_text;
    }
  }
  
  return $text;
}

/**
 * Implementation of hook_filter_tips()
 */
/*
function webpurify_filter_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('If you include a word in your post that\'s filtered (usually foul language), it will be replaced by the filtered version of the word.') .'<br />';
  }
  else {
    $GLOBALS['display_wordfilter_block'] = TRUE;
    return t('Filtered words will be replaced with the filtered version of the word.');
  }
}
*/

function webpurify_node_validate($node, $form, &$form_state) {
  // backward compatibility
  $op = 'validate';
  $a3 = $form;
  $a4 = NULL;
  
  // Are we in block mode
  if (webpurify_get_node_title_mode() == WEBPURIFY_MODE_BLOCK) {
    _webpurify_nodeapi_validate_title_block($node, $op, $a3, $a4);
  }
  if (webpurify_get_node_body_mode() == WEBPURIFY_MODE_BLOCK) {
    _webpurify_nodeapi_validate_body_block($node, $op, $a3, $a4);
  }

  // are we in rewrite mode
  if (webpurify_get_node_title_mode() == WEBPURIFY_MODE_REWRITE) {
    _webpurify_nodeapi_validate_title_rewrite($node, $op, $a3, $a4);
  }
  if (webpurify_get_node_body_mode() == WEBPURIFY_MODE_REWRITE) {
    _webpurify_nodeapi_validate_body_rewrite($node, $op, $a3, $a4);
  }
  
  return $node;
}

function webpurify_node_view($node, $view_mode, $langcode) {
  // backward compatibility
  $op = 'view';
  $a3 = $a4 = null;
  
  if ($view_mode == 'teaser') {
    // are we in rewrite mode
    if (webpurify_get_node_title_mode() == WEBPURIFY_MODE_REWRITE) {
      _webpurify_nodeapi_preview_title_rewrite($node, $op, $a3, $a4);
    }
    if (webpurify_get_node_body_mode() == WEBPURIFY_MODE_REWRITE) {
      _webpurify_nodeapi_preview_body_rewrite($node, $op, $a3, $a4);
    }
  }
  
  return $node;
}

function webpurify_node_presave($node) {
  // backward compatibility
  $op = 'presave';
  $a3 = $a4 = null;
  
  if (webpurify_get_node_title_mode() == WEBPURIFY_MODE_REWRITE) {
    _webpurify_nodeapi_presave_title_rewrite($node, $op, $a3, $a4);
  }
  
  return $node;
}

function _webpurify_nodeapi_validate_title_block(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // check for expletives
  $title_expletives = FALSE;
  $title = isset($a3['title']) && isset($a3['title']['#value']) ? $a3['title']['#value'] : NULL;
  if (is_null($title)) {
    watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- node title not found -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
    return FALSE;
  }
  $title_expletives = webpurify_api_return($title);
  // handle a failure of the API properly
  if ($title_expletives === FALSE) {
    watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
    if (webpurify_get_node_title_fail_mode() == WEBPURIFY_MODE_BLOCK) {
      form_set_error('webpurify', variable_get('webpurify_node_title_fail_message', t(WEBPURIFY_NODE_TITLE_FAIL_MESSAGE)));
    }
  }
  
  //$type_info = node_get_types('type', $node);// d 6.x
  $type_info = node_type_get_types();
  //drupal_set_message(__FUNCTION__ .': '. __LINE__ .' -- '. print_r($type_info, TRUE));
  
  // check if we got expletives back
  if (is_array($title_expletives) && count($title_expletives)) {
    form_set_error('title', t('Your @field cannot be posted since it contains objectionable language (%expletives). Please reword your @field.', array('@field' => $type_info[$node->type]->title_label, '%expletives' => implode(', ', $title_expletives))));
  }
}

function _webpurify_nodeapi_validate_body_block(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $language;
  // check for expletives
  //$body_expletives = webpurify_api_return($a3['body_field']['body']['#value']);// d 6.x
  $body = isset($a3['body']) ? $a3['body'] : array();
  $lang_code = isset($body['#language']) ? $body['#language'] : 'und';
  $body_value = isset($body[$lang_code]) && isset($body[$lang_code][0]) ? $body[$lang_code][0] : NULL;
  $body_value = isset($body_value['value']) && isset($body_value['value']['#value']) ? $body_value['value']['#value'] : NULL;
  
  if (is_null($body_value)) {
    watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- node body not found -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
    return FALSE;
  }
  
  $body_expletives = webpurify_api_return($body_value);
  
  // handle a failure of the API properly
  if ($body_expletives === FALSE) {
    watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
    if (webpurify_get_node_create_fail_mode() == WEBPURIFY_MODE_BLOCK) {
      form_set_error('webpurify', variable_get('webpurify_node_create_fail_message', t(WEBPURIFY_NODE_CREATE_FAIL_MESSAGE)));
    }
  }
  
  //$type_info = node_get_types('type', $node);// d 6.x
  $type_info = node_type_get_types();

  // check if we got expletives back
  if (is_array($body_expletives) && count($body_expletives)) {
    form_set_error('body', t('Your @field cannot be posted since it contains objectionable language (%expletives). Please reword your @field.', array('@field' => 'Body'/*$type_info[$node->type]->body_label*/, '%expletives' => implode(', ', $body_expletives))));
  }
}

function _webpurify_nodeapi_validate_title_rewrite(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $nid = $node->nid;
  
  $title = webpurify_api_replace($a3['title']['#value'], variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));
  if ($title === FALSE) {
    // handle a failure of the API properly
    if (webpurify_get_node_title_fail_mode() == WEBPURIFY_FAIL_MODE_BLOCK) {
      form_set_error('webpurify', variable_get('webpurify_node_title_fail_message', t(WEBPURIFY_NODE_CREATE_FAIL_MESSAGE)));
    }
    watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
  }
}

function _webpurify_nodeapi_validate_body_rewrite(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $language ;
  $nid = $node->nid;
  
  //$body = webpurify_api_replace($a3['body_field']['body']['#value'], variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL)); // d 6.x
  $language_key = isset($node->body[$language->language]) ? $language->language : 'und';
  $body = isset($node->body[$language_key][0]['value']);
  $body = webpurify_api_replace($body, variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));
  
  if ($body === FALSE) {
    // handle a failure of the API properly
    if (webpurify_get_node_body_fail_mode() == WEBPURIFY_FAIL_MODE_BLOCK) {
      form_set_error('webpurify', variable_get('webpurify_node_body_fail_message', t(WEBPURIFY_NODE_CREATE_FAIL_MESSAGE)));
    }
    watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
  }
  else {
    //$node->body = $body; // d 6.x
    $node->body[$language_key][0]['safe_value'] = $body;
  }
}

function _webpurify_nodeapi_preview_title_rewrite(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $nid = $node->nid;
  $title = webpurify_api_replace($node->title, variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));
  if ($title === FALSE) {
    // handle a failure of the API properly
    if (webpurify_get_node_title_fail_mode() == WEBPURIFY_FAIL_MODE_BLOCK) {
      form_set_error('webpurify', variable_get('webpurify_node_title_fail_message', t(WEBPURIFY_NODE_CREATE_FAIL_MESSAGE)));
    }
    watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
  }
  else {
    $node->title = $title;
  }
}

function _webpurify_nodeapi_preview_body_rewrite(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $language ;
  $nid = $node->nid;
  
  //$body = webpurify_api_replace($node->body, variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));// d 6.x
  $language_key = isset($node->body[$language->language]) ? $language->language : 'und';
  $body = isset($node->body[$language_key][0]['value']);
  $body = webpurify_api_replace($body, variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));
  
  if ($body === FALSE) {
    // handle a failure of the API properly
    if (webpurify_get_node_body_fail_mode() == WEBPURIFY_FAIL_MODE_BLOCK) {
      form_set_error('webpurify', variable_get('webpurify_node_body_fail_message', t(WEBPURIFY_NODE_CREATE_FAIL_MESSAGE)));
    }
    watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
  }
  else {
    //$node->body = $body; // d 6.x
    $node->body[$language_key][0]['safe_value'] = $body;
  }
}

function _webpurify_nodeapi_presave_title_rewrite(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $nid = $node->nid;
  $title = webpurify_api_replace($node->title, variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));
  if ($title === FALSE) {
    // handle a failure of the API properly
    if (webpurify_get_node_title_fail_mode() == WEBPURIFY_FAIL_MODE_BLOCK) {
      form_set_error('webpurify', variable_get('webpurify_node_title_fail_message', t(WEBPURIFY_NODE_CREATE_FAIL_MESSAGE)));
    }
    watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
  }
  else {
    $node->title = $title;
  }
}

function webpurify_comment_presave($comment) {
  $a1 = (array)$comment;
  
  // rewrite mode
  if (webpurify_get_comment_subject_mode() == WEBPURIFY_MODE_REWRITE) {
    $subject = webpurify_api_replace($a1['subject'], variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));
    // handle a failure of the API properly
    if ($subject === FALSE) {
      if (webpurify_get_comment_create_fail_mode() == WEBPURIFY_MODE_BLOCK) {
        form_set_error('webpurify', variable_get('webpurify_comment_fail_message', t(WEBPURIFY_COMMENT_CREATE_FAIL_MESSAGE)));
      }
    }
    $a1['subject'] = $subject;
  }
  return $comment;
}

function webpurify_comment_view($comment, $view_mode, $langcode) {
  $a1 = (array)$comment;
  
  if (!empty($a1->preview)) {
    // rewrite mode
    if (webpurify_get_comment_subject_mode() == WEBPURIFY_MODE_REWRITE) {
      $subject = webpurify_api_replace($a1->subject, variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));
      // handle a failure of the API properly
      if ($subject === FALSE) {
        if (webpurify_get_comment_create_fail_mode() == WEBPURIFY_MODE_BLOCK) {
          form_set_error('webpurify', variable_get('webpurify_comment_fail_message', t(WEBPURIFY_COMMENT_CREATE_FAIL_MESSAGE)));
        }
      }
      $a1->subject = $subject;
    }
  }
  return $comment;
}

function webpurify_comment_insert($comment) {
  $a1 = (array)$comment;
  
  if (!empty($a1) && (webpurify_get_comment_subject_mode() == WEBPURIFY_MODE_REWRITE)) {
    $cid = $a1['cid'];

    $subject = webpurify_api_replace($a1['subject'], variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));
    if ($subject === FALSE) {
      watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
    }
    elseif ($subject != $a1['subject']) {
      watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. "Comment Subject Rewrite [cid=".$cid."]: [".$a1['subject']."]>>>[".$subject."]", array(), WATCHDOG_NOTICE);
      db_query("UPDATE {comment} SET subject = :subject WHERE cid = :cid", array(':subject' => $subject, ':cid' => $cid));
    }
  }
  return $comment;
}

function webpurify_comment_update($comment) {
  $a1 = (array)$comment;
  
  if (!empty($a1) && (webpurify_get_comment_subject_mode() == WEBPURIFY_MODE_REWRITE)) {
    $cid = $a1['cid'];

    $subject = webpurify_api_replace($a1['subject'], variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL));
    if ($subject === FALSE) {
      watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
    }
    elseif ($subject != $a1['subject']) {
      watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. "Comment Subject Rewrite [cid=".$cid."]: [".$a1['subject']."]>>>[".$subject."]", array(), WATCHDOG_NOTICE);
      db_query("UPDATE {comment} SET subject = :subject WHERE cid = :cid", array(':subject' => $subject, ':cid' => $cid));
    }
  }
}

function webpurify_log($message, $log = '/tmp/webpurify.log') {
  $f = fopen($log, 'a+');
  if (!$f) {
      trigger_error('cannot open log.');
  }
  if (!fwrite($f, $message)) {
      trigger_error('cannot write log.');
  }
  if (!fclose($f)) {
      trigger_errr('cannot close log.');
  }
}

function webpurify_taxonomy_term_presave($term) {
  
}
function webpurify_taxonomy_term_insert($term) {
  webpurify_taxonomy('insert', 'term', (array)$term);
}
function webpurify_taxonomy_term_update($term) {
  webpurify_taxonomy('update', 'term', (array)$term);
}

/**
 * Implementation of hook_taxonomy()
 */
function webpurify_taxonomy($op, $type, $array = NULL) {
  if ($type == 'term' && ($op == 'insert' || $op == 'update')) {
    $symbol = variable_get('webpurify_filter_symbol', WEBPURIFY_DEFAULT_FILTER_SYMBOL);
    
    $mode_name = webpurify_get_term_name_mode();
    $mode_description = webpurify_get_term_description_mode();
    
    $tid = isset($array['tid']) ? $array['tid'] : NULL;
    $name = $name_orig = isset($array['name']) ? $array['name'] : NULL;
    $description = $description_orig = isset($array['description']) ? $array['description'] : NULL;
    
    switch($op) {
      case 'insert':
      case 'update':
        //webpurify_log('Taxonomy/Term/Update: ' . print_r($array, true));
        switch($mode_name) {
          case WEBPURIFY_MODE_REWRITE:
            $name = webpurify_api_replace($name, $symbol);
            if ($name === FALSE) {
              watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
            }
            elseif ($name != $name_orig) {
              watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. "Term Name Rewrite [tid=".$tid."]: [".$name_orig."]>>>[".$name."]", array(), WATCHDOG_NOTICE);
              db_query("UPDATE {taxonomy_term_data} SET name = :name WHERE tid = :tid", array(':name' => $name, ':tid' => $tid));
            }
            break;
          case WEBPURIFY_MODE_BLOCK:
            // impossible? maybe delete if blocked?
            break;
        }
        
        switch($mode_description) {
          case WEBPURIFY_MODE_REWRITE:
            $description = webpurify_api_replace($description, $symbol);
            if ($description === FALSE) {
              watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
            }
            elseif ($description != $description_orig) {
              watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. "Term Name Rewrite [tid=".$tid."]: [".$description_orig."]>>>[".$description."]", array(), WATCHDOG_NOTICE);
              db_query("UPDATE {taxonomy_term_data} SET description = :description WHERE tid = :tid", array(':description' => $description, ':tid' => $tid));
            }
            break;
          case WEBPURIFY_MODE_BLOCK:
            // impossible? maybe delete if blocked?
            break;
        }
        break; // insert || update
    }
  }
}

/**
 * Returns true if there are profane words in text
 */
function webpurify_api_check($text) {
  static $values = array();
  
  $hash = md5($text);
  if (!empty($values[$hash])) {
    return $values[$hash];
  }
  
  $result = _webpurify_api_call('webpurify.live.check', array('text'=>$text));

  if (isset($result['RSP']['#attributes']['STAT'])) {
    // was there an error?
    if ($result['RSP']['#attributes']['STAT'] == 'ok') {
      if (isset($result['RSP']['#children']['FOUND']['#value'])) {
        $values[$hash] = $result['RSP']['#children']['FOUND']['#value'];
        return $values[$hash];
      }
    }
    // error
    else {
      if (isset($result['RSP']['#children']['ERR']['#attributes']['CODE'])) {
        $GLOBALS['WEBPURIFY_ERROR'] = t("API error: Code @code - @msg", array('@code'=>$result['RSP']['#children']['ERR']['#attributes']['CODE'], '@msg'=>$result['RSP']['#children']['ERR']['#attributes']['MSG']));
        return FALSE;
      }
    }
  }
  
  $GLOBALS['WEBPURIFY_ERROR'] = t("API error: unrecoginzable response");
  return FALSE;
}

/**
 * Returns the number of profane words in text
 */
function webpurify_api_checkcount($text) {
  static $values = array();
  
  $hash = md5($text);
  if (!empty($values[$hash])) {
    return $values[$hash];
  }
  
  $result = _webpurify_api_call('webpurify.live.checkcount', array('text'=>$text));

  if (isset($result['RSP']['#attributes']['STAT'])) {
    // was there an error?
    if ($result['RSP']['#attributes']['STAT'] == 'ok') {
      if (isset($result['RSP']['#children']['FOUND']['#value'])) {
        $values[$hash] = $result['RSP']['#children']['FOUND']['#value'];
        return $values[$hash];
      }
    }
    // error
    else {
      if (isset($result['RSP']['#children']['ERR']['#attributes']['CODE'])) {
        $GLOBALS['WEBPURIFY_ERROR'] = t("API error: Code @code - @msg", array('@code'=>$result['RSP']['#children']['ERR']['#attributes']['CODE'], '@msg'=>$result['RSP']['#children']['ERR']['#attributes']['MSG']));
        return FALSE;
      }
    }
  }
  
  $GLOBALS['WEBPURIFY_ERROR'] = t("API error: unrecoginzable response");
  return FALSE;
}

/**
 * Returns the text with all profane words replaced
 */
function webpurify_api_replace($text, $replacesymbol) {
  static $values = array();
  
  $hash = md5($text . $replacesymbol);
  if (!empty($values[$hash])) {
    return $values[$hash];
  }

  $result = _webpurify_api_call('webpurify.live.replace', array('text'=>$text, 'replacesymbol'=>$replacesymbol));

  if (isset($result['RSP']['#attributes']['STAT'])) {
    // was there an error?
    if ($result['RSP']['#attributes']['STAT'] == 'ok') {
      if (isset($result['RSP']['#children']['FOUND']['#value'])) {
        if ($result['RSP']['#children']['FOUND']['#value']) {
          if (isset($result['RSP']['#children']['TEXT']['#value'])) {
            $values[$hash] = $result['RSP']['#children']['TEXT']['#value'];
            return $values[$hash];
          }
        }
        else {
          $values[$hash] = $text;
          return $values[$hash];
        }
      }
    }
    // error
    else {
      if (isset($result['RSP']['#children']['ERR']['#attributes']['CODE'])) {
        $GLOBALS['WEBPURIFY_ERROR'] = t("API error: Code @code - @msg", array('@code'=>$result['RSP']['#children']['ERR']['#attributes']['CODE'], '@msg'=>$result['RSP']['#children']['ERR']['#attributes']['MSG']));
        return FALSE;
      }
    }
  }
  
  $GLOBALS['WEBPURIFY_ERROR'] = t("API error: unrecoginzable response");
  return FALSE;
}

/**
 * Returns the profane words in text
 */
function webpurify_api_return($text) {
  static $values = array();
  
  $hash = md5($text);
  if (!empty($values[$hash])) {
    return $values[$hash];
  }

  $result = _webpurify_api_call('webpurify.live.return', array('text'=>$text));
  $expletives = array();
    
  if (isset($result['RSP']['#attributes']['STAT'])) {
    // was there an error?
    if ($result['RSP']['#attributes']['STAT'] == 'ok') {
      if (isset($result['RSP']['#children']['FOUND']['#value'])) {
        if ($result['RSP']['#children']['FOUND']['#value']) {
          if (isset($result['RSP']['#children']['EXPLETIVE'])) {
            if (isset($result['RSP']['#children']['EXPLETIVE']['#tag'])) {
              $expletives[] = $result['RSP']['#children']['EXPLETIVE']['#value'];
            }
            else {
              foreach ($result['RSP']['#children']['EXPLETIVE'] as $element) {
                if (isset($element['#value'])) {
                  $expletives[] = $element['#value'];
                }
              }
            }
            $values[$hash] = $expletives;
            return $values[$hash];
          }
        }
        else {
          $values[$hash] = $expletives;
          return $values[$hash];
        }
      }
    }
    // error
    else {
      if (isset($result['RSP']['#children']['ERR']['#attributes']['CODE'])) {
        $GLOBALS['WEBPURIFY_ERROR'] = t("API error: Code @code - @msg", array('@code'=>$result['RSP']['#children']['ERR']['#attributes']['CODE'], '@msg'=>$result['RSP']['#children']['ERR']['#attributes']['MSG']));
        return FALSE;
      }
    }
  }
  
  $GLOBALS['WEBPURIFY_ERROR'] = t("API error: unrecoginzable response");
  return FALSE;
}

/**
 * Calls remote REST interface and returns result as an array.
 */
function _webpurify_api_call($method, $params='') {
  $url = WEBPURIFY_REST_URL;
  $http_method = WEBPURIFY_REST_URL_METHOD;
  $headers = array();
  
  if ($http_method == 'POST') {
    $headers['Content-Type'] = 'application/x-www-form-urlencoded';
  }
  
  $raw_params = array(
        'api_key' => variable_get('webpurify_developerkey', ''),
        'method' => $method,
  );
  $raw_params = array_merge($raw_params, $params);
  
  $encoded_params = array();
  foreach ($raw_params as $k => $v){
       $encoded_params[] = urlencode($k).'='.urlencode($v);
  }
  
  //dpm($encoded_params);
  if ($http_method == 'POST') {
    //$result = drupal_http_request($url, $headers, $http_method, implode('&', $encoded_params)); // d 6.x
    $result = drupal_http_request($url, array('headers' => $headers, 'method' => $http_method, 'data' => implode('&', $encoded_params)));
  }
  else {
    $url = WEBPURIFY_REST_URL."?".implode('&', $encoded_params);
    
    //$result = drupal_http_request($url, $headers, $http_method); // d 6.x
    $result = drupal_http_request($url, array('headers' => $headers, 'method' => $http_method));
  }
  
  switch ($result->code) {
    case 200: // OK
    case 304: // Not modified
      return _webpurify_parse_xml($result->data);
      break;
    default:
      $GLOBALS['WEBPURIFY_ERROR'] = t("drupal_http_request() failed: %code %error", array('%code'=>$result->code, '%error'=>$result->error));
      return FALSE;
      break;
  }
}

/**
 * Gets XML in a string and parses it into an array.
 */
function _webpurify_parse_xml($xml) {
  $parser = NULL;
  $structure = array();
  $index = array();
  $result = FALSE;
  
  // The WebPurify API doesn't wrap the text in cdata, so we will try to fix it
  if (!preg_match('@<text>\s*<!\[CDATA\[@im', $xml)) {
    $xml = preg_replace('@<text>@im', '<text><![CDATA[', $xml);
    $xml = preg_replace('@</text>@im', ']]></text>', $xml);
  }
  
  // did we get any xml?
  if ($xml == "") {
    $GLOBALS['WEBPURIFY_ERROR'] = t("xml was empty");
    return FALSE;
  }
  
  // create the parser object
  if (!($parser = xml_parser_create())) {
    $GLOBALS['WEBPURIFY_ERROR'] = t("xml_parser_create() failed to return parser");
    return FALSE;
  }

  // try to parse the xml
  if (xml_parse_into_struct($parser, trim($xml), $structure, $index) === 0) {
    $err_code = xml_get_error_code($parser);
    $err_string = xml_error_string($err_code);
    $GLOBALS['WEBPURIFY_ERROR'] = t("xml_parse_into_struct failed: Code @code - @msg", array('@code'=>$err_code, '@msg'=>$err_string));
    xml_parser_free($parser);
    return FALSE;
  }
  xml_parser_free($parser);

  // return the parsed xml
  //dsm($structure);
  return _webpurify_parse_xml_helper($structure);
}

/**
 * private helper for webpurify_parse_xml_result, to recusively parsing the result
 */
function _webpurify_parse_xml_helper($input, $depth = 1) {
  $output = array();
  $children = array();
  $attributes = FALSE;

  foreach( $input as $data ) {
    if (!isset($data['attributes'])) {
      $data['attributes'] = null;
    }
    if ( $data['level'] == $depth ) {
      switch($data['type']) {
        case 'complete':
          $value = isset($data['value']) ? $data['value'] : NULL;
          $element = array(
            '#tag' => $data['tag'],
            '#value' => $value,
          );
          if ($data['attributes']) {
            $element['#attributes'] = $data['attributes'];
          }
          
          // see if we need to convert from single element to an array of elements
          if (isset($output[$data['tag']]['#tag'])) {
            $temp_element = $output[$data['tag']];
            $output[$data['tag']] = array();
            $output[$data['tag']][] = $temp_element;
            $output[$data['tag']][] = $element;
          }
          // already an array of elements
          elseif (isset($output[$data['tag']]) && is_array($output[$data['tag']])) {
            $output[$data['tag']][] = $element;
          }
          // a single element
          else {
            $output[$data['tag']] = $element;
          }  
          break;

        case 'open':
          $children = array();
          $attributes = FALSE;
          if ($data['attributes']) {
            $attributes = $data['attributes'];
          }
          break;

        case 'close':
          $element = array(
            '#tag' => $data['tag'],
            '#children' => _webpurify_parse_xml_helper($children, $depth + 1),
          );
          if ($attributes) {
            $element['#attributes'] = $attributes;
          }
          
          // see if we need to convert from single element to an array of elements
          if (isset($output[$data['tag']]['#tag'])) {
            $temp_element = $output[$data['tag']];
            $output[$data['tag']] = array();
            $output[$data['tag']][] = $temp_element;
            $output[$data['tag']][] = $element;
          }
          // already an array of elements
          elseif (isset($output[$data['tag']]) && is_array($output[$data['tag']])) {
            $output[$data['tag']][] = $element;
          }
          // a single element
          else {
            $output[$data['tag']] = $element;
          }  
          break;
      }
    }
    else {
      $children[] = $data;
    }
  }
  
  return $output;
}

function webpurify_get_error() {
  if (!empty($GLOBALS['WEBPURIFY_ERROR'])) {
    return $GLOBALS['WEBPURIFY_ERROR'];
  }
  return 'Empty error string';
}

function webpurify_get_node_title_mode() {
  return variable_get('webpurify_node_title_mode', WEBPURIFY_MODE_OFF);
}

function webpurify_get_node_title_fail_mode() {
  return variable_get('webpurify_node_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK);
}

function webpurify_get_node_body_mode() {
  return variable_get('webpurify_node_body_mode', WEBPURIFY_MODE_OFF);
}

function webpurify_get_node_create_fail_mode() {
  return variable_get('webpurify_node_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK);
}

function webpurify_get_node_view_fail_mode() {
  return variable_get('webpurify_node_view_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK);
}

function webpurify_get_comment_subject_mode() {
  return variable_get('webpurify_comment_subject_mode', WEBPURIFY_MODE_OFF);
}

function webpurify_get_comment_body_mode() {
  return variable_get('webpurify_comment_body_mode', WEBPURIFY_MODE_OFF);
}

function webpurify_get_comment_create_fail_mode() {
  return variable_get('webpurify_comment_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK);
}

function webpurify_get_term_name_mode() {
  return variable_get('webpurify_term_name_mode', WEBPURIFY_MODE_OFF);
}

function webpurify_get_term_name_create_fail_mode() {
  return variable_get('webpurify_term_name_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK);
}

function webpurify_get_term_description_mode() {
  return variable_get('webpurify_term_description_mode', WEBPURIFY_MODE_OFF);
}

function webpurify_get_term_description_create_fail_mode() {
  return variable_get('webpurify_term_description_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK);
}

function webpurify_get_user_username_mode() {
  return variable_get('webpurify_user_username_mode', WEBPURIFY_MODE_OFF);
}

function webpurify_get_user_username_fail_mode() {
  return variable_get('webpurify_user_create_fail_mode', WEBPURIFY_FAIL_MODE_BLOCK);
}

function webpurify_form_alter(&$form, &$form_state, $form_id) {
  if (substr($form_id,-10) == '_node_form') {
    // alter node title / body validation
    $form['#validate'][] = 'webpurify_validate_node';
  }
  if (substr($form_id, 0, 13) == 'comment_node_') {
    // alter comment subject / body validation
    $form['#validate'][] = 'webpurify_validate_comment';
  }
  if (in_array($form_id,array('user_register_form', 'user_profile_form'))) {
    // alter register/profile form validation
    $form['#validate'][] = 'webpurify_validate_username';
  }
}

function webpurify_validate_username($form, &$form_state) {
  if (isset($form_state['values']) && isset($form_state['values']['name']) && !empty($form_state['values']['name'])) {
    $mode = webpurify_get_user_username_mode();
    $name = $form_state['values']['name'];
    
    switch($mode) {
      case WEBPURIFY_MODE_BLOCK:
        $name_expletives = webpurify_api_return($name);
        if ($name_expletives === FALSE) {
          watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
          if (webpurify_get_user_username_fail_mode() == WEBPURIFY_FAIL_MODE_BLOCK) {
            form_set_error('webpurify', variable_get('webpurify_user_username_fail_message', t(WEBPURIFY_USER_CREATE_FAIL_MESSAGE)));
          }
        }
        if (is_array($name_expletives) && count($name_expletives)) {
          form_set_error('name', t('Your username cannot be posted since it contains objectionable language (%expletives). Please reword your username.', array('%expletives' => implode(', ', $name_expletives))));
        }
        break;
    }
  }
}

function webpurify_validate_node($form, &$form_state) {
  /*$input = isset($form_state['input']) ? $form_state['input'] : array();var_dump($input);die();
  _webpurify_nodeapi_validate_title_block(($node = NULL), NULL, $input);
  _webpurify_nodeapi_validate_body_block(($node = NULL), NULL, $input);*/
}

function webpurify_validate_comment($form, &$form_state) {
  $a1 = isset($form_state['values']) ? $form_state['values'] : array();
  
  // block mode
  if (isset($a1['subject']) && webpurify_get_comment_subject_mode() == WEBPURIFY_MODE_BLOCK) {
    // get expletives
    $subject_expletives = webpurify_api_return($a1['subject']);

    // handle a failure of the API properly
    if ($subject_expletives === FALSE) {
      watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
      if (webpurify_get_comment_create_fail_mode() == WEBPURIFY_MODE_BLOCK) {
        form_set_error('webpurify', variable_get('webpurify_comment_fail_message', t(WEBPURIFY_COMMENT_CREATE_FAIL_MESSAGE)));
      }
    }

    // check if we got expletives back
    if (is_array($subject_expletives) && count($subject_expletives)) {
      form_set_error('subject', t('Your subject cannot be posted since it contains objectionable language (%expletives). Please reword your subject.', array('%expletives' => implode(', ', $subject_expletives))));
    }
  }
  
  $lang_code = isset($a1['language']) ? $a1['language'] : 'und';
  $body = isset($a1['comment_body']) && isset($a1['comment_body'][$lang_code]) ? $a1['comment_body'][$lang_code] : NULL;
  $body = isset($body[0]) && isset($body[0]['value']) ? $body[0]['value'] : NULL;
  
  if (!is_null($body) && webpurify_get_comment_body_mode() == WEBPURIFY_MODE_BLOCK) {
    // get expletives
    $comment_expletives = webpurify_api_return($body);

    // handle a failure of the API properly
    if ($comment_expletives === FALSE) {
      watchdog(WEBPURIFY_WATCHDOG_TYPE, __FUNCTION__ .': '. __LINE__ .' -- '. webpurify_get_error(), array(), WATCHDOG_ERROR);
      if (webpurify_get_comment_create_fail_mode() == WEBPURIFY_MODE_BLOCK) {
        form_set_error('webpurify', variable_get('webpurify_comment_fail_message', t(WEBPURIFY_COMMENT_CREATE_FAIL_MESSAGE)));
      }
    }

    // check if we got expletives back
    if (is_array($comment_expletives) && count($comment_expletives)) {
      form_set_error('comment', t('Your comment cannot be posted since it contains objectionable language (%expletives). Please reword your comment.', array('%expletives' => implode(', ', $comment_expletives))));
    }
  }
}
